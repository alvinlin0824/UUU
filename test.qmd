---
title: "Untitled"
format: html
editor: visual
execute: 
  eval: false
---

```{r}
#| message: false
library(vroom)
library(fs)
library(tidyverse)
library(gt)
```

<!-- Atna -->

<!-- 193, 210 and 215 -->

```{r}
#| label: Find all events gluc and freestyle files csv
file_list <- dir_ls(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-21210\UploadData\AUU\AUU_DataFiles)"),recurse = T,glob = "*events.csv|*gluc.csv|*freestyle.csv")
```

```{r}
events_path <- file_list[str_detect(file_list,"events") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
gluc_path <- file_list[str_detect(file_list,"gluc") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
#| warning: false
atna1(events = events_path,gluc = gluc_path,index = 1) |> View()
```

```{r}
atna1 <- function(events, gluc, index = NULL) {

  # Individual File
  if (is.numeric(index)) {
    purrr::map2(
      # First List
      # Import Events
      events[index] |>
        purrr::set_names() |>
        # Consider empty events.csv
        purrr::map(purrr::possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(`Col 9` = "c"),col_select = c(Date,Time,Type,`Col 9`)),tibble::tibble()),.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::filter(Type == "SENSOR_STARTED (58)"),.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::transmute(
          `Date Time` = lubridate::ymd_hms(stringr::str_c(Date,Time,sep = " ")),
           Type = Type,
          `Sensor Serial Number` = `Col 9`),.progress = TRUE),
        # Replaced Sensors Only
        # map(\(df) df |> slice_max(`Date Time`,n = 1)),

      purrr::map2(
        # Second List
        # Import gluc.csv
        gluc[index] |>
          purrr::map(purrr::possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,Gl,St,Tr),n_max = 2),tibble::tibble()),.progress = TRUE),
        gluc[index] |>
          purrr::map(possibly(\(path) data.table::fread(path,select = c(1:7),skip = 3,col.names = c("Unique Record ID","Date","Time","Type","Gl","St","Tr"),colClasses = c("V2" = "Date","V4" = "character")),tibble::tibble()),.progress = TRUE),
        dplyr::bind_rows,.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::transmute(`Subject ID` =
                                  dplyr::case_when(
                                      # Site ID == ADC
                                    stringr::str_to_upper(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T)),
                                      # Site ID == 009
                                    stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                                      stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = 00).{1}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID starts with 1
                                    stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                                      stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{3}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID == 081
                                    stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{1}",ignore_case = T)) == "0" ~ stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = 0).{2}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]+",ignore_case = T))),
                                      # Site ID mislabeled
                                      .default = stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = )[:alnum:]+",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]+",ignore_case = T)))
                                    ),
                                  `Condition ID` = stringr::str_extract(df[1,1],stringr::regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                                  `Reader ID` = stringr::str_extract(df[2,1],stringr::regex("(?<=Reader_S_N ).{13}",ignore_case = T)),
                                  `Date Time` = lubridate::ymd_hms(stringr::str_c(Date,Time,sep = " ")),
                                   Type = Type,
                                   Gl = Gl,
                                   St = St,
                                   Tr = Tr),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::slice(3:n()),.progress = TRUE),dplyr::bind_rows,.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::arrange(`Date Time`),.progress = TRUE) |>
      purrr::map(\(df) df |> tidyr::fill(c(`Subject ID`,`Condition ID`,`Reader ID`),.direction = "up"),.progress = TRUE) |>
      purrr::map(\(df) df |> tidyr::fill(`Sensor Serial Number`,.direction = "down"),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::relocate(`Subject ID`,`Condition ID`,`Sensor Serial Number`,
                               `Reader ID`,`Date Time`,Type,Gl,St,Tr),.progress = TRUE) |>
      purrr::list_rbind(names_to = "Path")

  } else {

    # All Upload Data
    purrr::map2(
      # First List
      # Import Events
      events |>
        purrr::set_names() |>
        # Consider empty events.csv
        purrr::map(purrr::possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(`Col 9` = "c"),col_select = c(Date,Time,Type,`Col 9`)),tibble::tibble()),.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::filter(Type == "SENSOR_STARTED (58)"),.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::transmute(
          `Date Time` = lubridate::ymd_hms(stringr::str_c(Date,Time,sep = " ")),
           Type = Type,
          `Sensor Serial Number` = `Col 9`),.progress = TRUE),
        # Replaced Sensors Only
        # map(\(df) df |> slice_max(`Date Time`,n = 1)),

      purrr::map2(
        # Second List
        # Import gluc.csv
        gluc |>
          purrr::map(purrr::possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,Gl,St,Tr),n_max = 2),tibble::tibble()),.progress = TRUE),
        gluc |>
          purrr::map(purrr::possibly(\(path) data.table::fread(path,select = c(1:7),skip = 3,col.names = c("Unique Record ID","Date","Time","Type","Gl","St","Tr"),colClasses = c("V2" = "Date","V4" = "character")),tibble::tibble()),.progress = TRUE),
        dplyr::bind_rows,.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::transmute(`Subject ID` =
                                    dplyr::case_when(
                                      # Site ID == ADC
                                      stringr::str_to_upper(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T)),
                                      # Site ID == 009
                                      stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                                        stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = 00).{1}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID starts with 1
                                      stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                                        stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{3}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID == 081
                                      stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{1}",ignore_case = T)) == "0" ~ stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = 0).{2}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]+",ignore_case = T))),
                                      # Site ID mislabeled
                                      .default = stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = )[:alnum:]+",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]+",ignore_case = T)))
                                    ),
                                  `Condition ID` = stringr::str_extract(df[1,1],stringr::regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                                  `Reader ID` = stringr::str_extract(df[2,1],stringr::regex("(?<=Reader_S_N ).{13}",ignore_case = T)),
                                  `Date Time` = lubridate::ymd_hms(stringr::str_c(Date,Time,sep = " ")),
                                   Type = Type,
                                   Gl = Gl,
                                   St = St,
                                   Tr = Tr),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::slice(3:n()),.progress = TRUE),dplyr::bind_rows,.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::arrange(`Date Time`),.progress = TRUE) |>
      purrr::map(\(df) df |> tidyr::fill(c(`Subject ID`,`Condition ID`,`Reader ID`),.direction = "up"),.progress = TRUE) |>
      purrr::map(\(df) df |> tidyr::fill(`Sensor Serial Number`,.direction = "down"),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::relocate(`Subject ID`,`Condition ID`,`Sensor Serial Number`,
                               `Reader ID`,`Date Time`,Type,Gl,St,Tr),.progress = TRUE) |>
      purrr::list_rbind(names_to = "Path") |>
      # Remove Duplicated Uploads
      dplyr::distinct() |>
      dplyr::arrange(Path,`Subject ID`,`Condition ID`,`Sensor Serial Number`)
  }
}
```

```{r}
library(UUU)
```

```{r}
#| warning: false
atna(events = events_path,gluc = gluc_path) |> View()
```

<!-- Apol -->

```{r}
#| label: Find all events gluc and freestyle files csv
file_list <- dir_ls(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-VAL-21206\UploadData\AUU\AUU_DataFiles)"),recurse = T,glob = "*events.csv|*gluc.csv|*freestyle.csv")
```

```{r}
events_path <- file_list[str_detect(file_list,"events") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
#| warning: false
events(events_path = events_path)
```

```{r}
gluc_path <- file_list[str_detect(file_list,"gluc") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
free_path <- file_list[str_detect(file_list,"freestyle") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
#| warning: false
freestyle(freestyle_path = free_path)
```

```{r}
#| warning: false
apol(events = events_path,gluc = gluc_path)
```

<!-- Apol 22222 -->

```{r}
file_list <- dir_ls(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-PMS-22222\UploadData)"),recurse = T,glob = "*events.csv|*freestyle.csv|*gluc.csv")
```

```{r}
events_path <- file_list[str_detect(file_list,"events")  & !str_detect(file_list,regex("Transfers",ignore_case = T))]
gluc_path <- file_list[str_detect(file_list,"gluc") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
free_path <- file_list[str_detect(file_list,"freestyle") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
apol <- function(events, gluc, index = NULL) {

  # Individual File
  if (is.numeric(index)) {
    map2(
      # First List
      # Import Events
      events[index] |>
        set_names() |>
        # Consider empty events.csv
        map(possibly(\(path) vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(`Col 9` = "c"),col_select = c(Date,Time,Type,`Col 9`)),tibble()),.progress = TRUE) |>
        map(\(df) df |> filter(Type == "SENSOR_STARTED (58)")) |>
        map(\(df) df |> transmute(
          `Date Time` = ymd_hms(str_c(Date,Time,sep = " ")),
           Type = Type,
          `Sensor Serial Number` = `Col 9`)),
        # Replaced Sensors Only
        # map(\(df) df |> slice_max(`Date Time`,n = 1)),

      map2(
        # Second List
        # Import gluc.csv
        gluc[index] |>
          map(possibly(\(path) vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,Gl,St,Tr),n_max = 2),tibble())),
        gluc[index] |>
          map(possibly(\(path) data.table::fread(path,select = c(1:7),skip = 3,col.names = c("Unique Record ID","Date","Time","Type","Gl","St","Tr"),colClasses = c("V2" = "Date","V4" = "character")),tibble())),
        bind_rows,.progress = TRUE) |>
        map(\(df) df |> transmute(`Subject ID` =
                                    case_when(
                                      # Site ID == ADC
                                      str_to_upper(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]{4}",ignore_case = T)),
                                      # Site ID == 009
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = 00).{1}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID starts with 1
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID == 081 or 057
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "0" ~ str_c(str_extract(df[1,1],regex("(?<=Site ID = 0).{2}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID mislabeled
                                      .default = str_c(str_extract(df[1,1],regex("(?<=Site ID = )[:alpha:]+",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]+",ignore_case = T)))
                                    ),
                                  `Condition ID` = str_extract(df[1,1],regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                                  `Reader ID` = str_extract(df[2,1],regex("(?<=\\s).{13}",ignore_case = T)),
                                  `Date Time` = ymd_hms(str_c(Date,Time,sep = " ")),
                                   Type = Type,
                                   Gl = Gl,
                                   St = St,
                                   Tr = Tr)) |>
        map(\(df) df |> slice(3:n())),bind_rows) |>
      map(\(df) df |>  arrange(`Date Time`)) |>
      map(\(df) df |> fill(c(`Subject ID`,`Condition ID`,`Reader ID`),.direction = "up")) |>
      map(\(df) df |> fill(`Sensor Serial Number`,.direction = "down")) |>
      map(\(df) df |> relocate(`Subject ID`,`Condition ID`,`Sensor Serial Number`,
                               `Reader ID`,`Date Time`,Type,Gl,St,Tr)) |>
      list_rbind(names_to = "Path")

  } else {

    # All Upload Data
    map2(
      # First List
      # Import Events
      events |>
        set_names() |>
        # Consider empty events.csv
        map(possibly(\(path) vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(`Col 9` = "c"),col_select = c(Date,Time,Type,`Col 9`)),tibble()),.progress = TRUE) |>
        map(\(df) df |> filter(Type == "SENSOR_STARTED (58)")) |>
        map(\(df) df |> transmute(
          `Date Time` = ymd_hms(str_c(Date,Time,sep = " ")),
           Type = Type,
          `Sensor Serial Number` = `Col 9`)),
        # Replaced Sensors Only
        # map(\(df) df |> slice_max(`Date Time`,n = 1)),

      map2(
        # Second List
        # Import gluc.csv
        gluc |>
          map(possibly(\(path) vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,Gl,St,Tr),n_max = 2),tibble())),
        gluc |>
          map(possibly(\(path) data.table::fread(path,select = c(1:7),skip = 3,col.names = c("Unique Record ID","Date","Time","Type","Gl","St","Tr"),colClasses = c("V2" = "Date","V4" = "character")),tibble())),
        bind_rows,.progress = TRUE) |>
        map(\(df) df |> transmute(`Subject ID` =
                                    case_when(
                                      # Site ID == ADC
                                      str_to_upper(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]{4}",ignore_case = T)),
                                      # Site ID == 009
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = 00).{1}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID starts with 1
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID == 081 or 057
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "0" ~ str_c(str_extract(df[1,1],regex("(?<=Site ID = 0).{2}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID mislabeled
                                      .default = str_c(str_extract(df[1,1],regex("(?<=Site ID = )[:alpha:]+",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]+",ignore_case = T)))
                                    ),
                                  `Condition ID` = str_extract(df[1,1],regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                                  `Reader ID` = str_extract(df[2,1],regex("(?<=\\s).{13}",ignore_case = T)),
                                  `Date Time` = ymd_hms(str_c(Date,Time,sep = " ")),
                                   Type = Type,
                                   Gl = Gl,
                                   St = St,
                                   Tr = Tr)) |>
        map(\(df) df |> slice(3:n())),bind_rows) |>
      map(\(df) df |> arrange(`Date Time`)) |>
      map(\(df) df |> fill(c(`Subject ID`,`Condition ID`,`Reader ID`),.direction = "up")) |>
      map(\(df) df |> fill(`Sensor Serial Number`,.direction = "down")) |>
      map(\(df) df |> relocate(`Subject ID`,`Condition ID`,`Sensor Serial Number`,
                               `Reader ID`,`Date Time`,Type,Gl,St,Tr)) |>
      list_rbind(names_to = "Path") |>
      # Remove Duplicated Uploads
      distinct() |>
      arrange(Path,`Subject ID`,`Condition ID`,`Sensor Serial Number`)
  }
}
```

```{r}
apol(events = events_path[1:5],gluc = gluc_path[1:5]) |> View()
```

```{r}
   map2(
      # First List
      # Import Events
     events_path[1] |>
        set_names() |>
        # Consider empty events.csv
        map(possibly(\(path) vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(`Col 9` = "c"),col_select = c(Date,Time,Type,`Col 9`)),tibble()),.progress = TRUE) |>
        map(\(df) df |> filter(Type == "SENSOR_STARTED (58)")) |>
        map(\(df) df |> transmute(
          `Date Time` = ymd_hms(str_c(Date,Time,sep = " ")),
           Type = Type,
          `Sensor Serial Number` = `Col 9`)),
        # Replaced Sensors Only
        # map(\(df) df |> slice_max(`Date Time`,n = 1)),

      map2(
        # Second List
        # Import gluc.csv
        gluc_path[1] |>
          map(possibly(\(path) vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,Gl,St,Tr),n_max = 2),tibble())),
        gluc_path[1] |>
          map(possibly(\(path) data.table::fread(path,select = c(1:7),skip = 3,col.names = c("Unique Record ID","Date","Time","Type","Gl","St","Tr"),colClasses = c("V2" = "Date","V4" = "character")),tibble())),
        bind_rows,.progress = TRUE) |>
        map(\(df) df |> transmute(`Subject ID` =
                                    case_when(
                                      # Site ID == ADC
                                      str_to_upper(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]{4}",ignore_case = T)),
                                      # Site ID == 009
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = 00).{1}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID starts with 1
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID == 081 or 057
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "0" ~ str_c(str_extract(df[1,1],regex("(?<=Site ID = 0).{2}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID mislabeled
                                      .default = str_c(str_extract(df[1,1],regex("(?<=Site ID = )[:alpha:]+",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]+",ignore_case = T)))
                                    ),
                                  `Condition ID` = str_extract(df[1,1],regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                                  `Reader ID` = str_extract(df[2,1],regex("(?<=\\s).{13}",ignore_case = T)),
                                  `Date Time` = ymd_hms(str_c(Date,Time,sep = " ")),
                                   Type = Type,
                                   Gl = Gl,
                                   St = St,
                                   Tr = Tr)) |>
        map(\(df) df |> slice(3:n())),bind_rows) |>
      map(\(df) df |>  arrange(`Date Time`)) |>
      map(\(df) df |> fill(c(`Subject ID`,`Condition ID`,`Reader ID`),.direction = "up")) |>
      map(\(df) df |> fill(`Sensor Serial Number`,.direction = "down")) |>
      map(\(df) df |> relocate(`Subject ID`,`Condition ID`,`Sensor Serial Number`,
                               `Reader ID`,`Date Time`,Type,Gl,St,Tr)) |>
      list_rbind(names_to = "Path") |> View()
```

```{r}
UUU::apol(events = events_path,gluc = gluc_path)
```

```{r}
UUU::freestyle(freestyle_path = free_path,index = 1)
```

```{r}
#| warning: false
apol(events = events_path,gluc = gluc_path,index = 4)
```

```{r}
#| warning: false
saveRDS(UUU::apol(events = events_path,gluc = gluc_path),gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\Clinical Study Files\Apollo\ADC-US-PMS-22222_SiBionics\Statistics\Programs\Datasets\AL\UUU.rds)"))
```

```{r}
#| warning: false
saveRDS(UUU::freestyle(freestyle_path = free_path,index = 1),gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\Clinical Study Files\Apollo\ADC-US-PMS-22222_SiBionics\Statistics\Programs\Datasets\AL\BG.rds)"))
```

<!-- Mobi IH102 -->

```{r}
#| label: Find all events gluc and freestyle files csv
file_list <- dir_ls(gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\CDM_16157\102\UUU\102UUUFIN_G1L1_3\29SEP2022_G1L3)"),recurse = T,glob = "*events.csv|*gluc.csv|*freestyle.csv")
```

```{r}
events_path <- file_list[str_detect(file_list,"events") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
gluc_path <- file_list[str_detect(file_list,"gluc") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
#| warning: false
mobi(events = events_path,gluc = gluc_path) |> View()
```

<!-- events -->

<!-- IH115 -->

```{r}
#| label: Find all events gluc and freestyle files csv
file_list1 <- dir_ls(gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\CDM_16157\115\UUU)"),recurse = T,glob = "*events.csv")
```

```{r}
#| label: Filter events index 300
events_path <- file_list1[str_detect(file_list1,"events") & !str_detect(file_list1,"Archive")]
```

<!-- IH115 -->

<!-- 206 -->

```{r}
#| label: OUS Import all events, gluc and glucPlus files csv
file_list <- dir_ls(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-VAL-21206\Processing\R-FSL2-LVC-G3-OUS\glucplusOutput)"),recurse = T,glob = "*events.csv|*glucPlus.csv|*gluc.csv")
```

<!-- 584 files -->

```{r}
#| label: Filter events index 237
events_path <- file_list[str_detect(file_list,"events")]
```

<!-- 206 -->

```{r}
#| warning: false
  events_path[314:316] |>
      map(possibly(\(path) vroom(path,delim = ",",
                                 col_names = T,
                                 show_col_types = F,
                                 col_types = c(`Col 5` = "c",`Col 9` = "c"),
                                 col_select = 
                                   c(`Unique Record ID`,Date,Time,Type,`Col 5`,`Col 9`)),
          tibble()),.progress = TRUE) |>
      map(\(df) df |>
            transmute(`Subject ID` =
                        case_when(
                          # Site ID == ADC
                          str_to_upper(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T)),
                          # Site ID == 009
                          str_extract(df[1,1],regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                            str_c(str_extract(df[1,1],regex("(?<=Site ID = 00).{1}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                          # Site ID starts with 1
                          str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                            str_c(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                          # Site ID == 081
                          .default = str_c(str_extract(df[1,1],regex("(?<=Site ID = 0).{2}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T)))
                        ),
                      `Condition ID` = str_extract(df[1,1],regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                      `Reader ID` = str_extract(df[2,1],regex("(?<=\\s).{13}",ignore_case = T)),
                      `Sensor Serial Number` = `Col 5`,
                      `Col 9` = `Col 9`,
                      `Event Date Time` = ymd_hms(str_c(Date,Time,sep = " ")),
                       Type = Type)) |>
        map(\(df) df |> filter(!is.na(Type))) |> 
        map(\(df) df |> mutate(`Col 9` = case_when(str_detect(`Col 9`,"[:alpha:]") ~ `Col 9`,
                                   .default = NA_character_),
                               `Sensor Serial Number` = case_when(
                                str_detect(`Sensor Serial Number`,"[:alpha:]") 
                                 ~ `Sensor Serial Number`,
                                 .default = `Col 9`))) |> 
        map(\(df) df |> fill(`Sensor Serial Number`,.direction = "updown")) |> 
        list_rbind() |> 
        select(!`Col 9`) |> 
        distinct() |> 
        arrange(`Subject ID`,`Condition ID`)
      #   list_rbind() |>
      # # Remove Duplicated
      #   distinct() |>
      # Remove Type is NA
        # filter(!is.na(Type)) |> 
        # mutate(`Col 9` = case_when(str_detect(`Col 9`,"[:alpha:]") ~ `Col 9`,
        #                            .default = NA_character_),
        #        `Sensor Serial Number` = case_when(
        #          str_detect(`Sensor Serial Number`,"[:alpha:]") ~ `Sensor Serial Number`,
        #            .default = `Col 9`)) |> 
        # fill(`Sensor Serial Number`,.direction = "up") |> 
        # select(!`Col 9`) |> View()
        # arrange(`Subject ID`,`Condition ID`) |> 
```

<!-- 225 SE14 Site ID = CIG -->

```{r}
#| label: Find all events and gluc files csv
file_list <- dir_ls(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-22225\SE14_Glu\UploadData\UUU\UUU_DataFiles\TDE-082)"),recurse = T,glob = "*events.csv|*gluc.csv|*freestyle.csv")
```

```{r}
#| label: Filter all and find events 
events_path <- file_list[!str_detect(file_list,"Transfers|FV_Do Not Use") & str_detect(file_list,"events")]
```

```{r}
#| label: Filter all and find gluc
gluc_path <- file_list[!str_detect(file_list,"Transfers|FV_Do Not Use") & str_detect(file_list,"gluc")]
```

```{r}
#| warning: false
UUU::apol(events = events_path,gluc = gluc_path,index = 20) |> View()
```

```{r}
#| warning: false
    map2(
      # First List
      # Import Events
      events_path[92:94] |>
        # Consider empty events.csv
        map(possibly(\(path) vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(`Col 9` = "c"),col_select = c(Date,Time,Type,`Col 9`)),tibble()),.progress = TRUE) |>
        map(\(df) df |> filter(Type == "SENSOR_STARTED (58)")) |>
        map(\(df) df |> transmute(
          `Date Time` = ymd_hms(str_c(Date,Time,sep = " ")),
           Type = Type,
          `Sensor Serial Number` = `Col 9`)),
        # Replaced Sensors Only
        # map(\(df) df |> slice_max(`Date Time`,n = 1)),

      map2(
        # Second List
        # Import gluc.csv
        gluc_path[92:94] |>
          set_names() |> 
          map(possibly(\(path) vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,Gl,St,Tr),n_max = 2),tibble())),
        gluc_path[92:94] |>
          set_names() |> 
          map(possibly(\(path) data.table::fread(path,select = c(1:7),skip = 3,col.names = c("Unique Record ID","Date","Time","Type","Gl","St","Tr"),colClasses = c("V2" = "Date","V4" = "character")),tibble())),
        bind_rows,.progress = TRUE) |>
        map(\(df) df |> transmute(`Subject ID` =
                                    case_when(
                                      # Site ID == ADC
                                      str_to_upper(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]{4}",ignore_case = T)),
                                      # Site ID == 009
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = 00).{1}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID starts with 1
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID == 081
                                     str_extract(df[1,1],regex("(?<=Site ID = ).{2}",ignore_case = T)) == "08" ~ str_c(str_extract(df[1,1],regex("(?<=Site ID = 0).{2}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                     # Site ID mislabeled  
                                     .default = str_c(str_extract(df[1,1],regex("(?<=Site ID = )[:alpha:]+",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]+",ignore_case = T)))
                                    ),
                                  `Condition ID` = str_extract(df[1,1],regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                                  `Reader ID` = str_extract(df[2,1],regex("(?<=\\s).{13}",ignore_case = T)),
                                  `Date Time` = ymd_hms(str_c(Date,Time,sep = " ")),
                                   Type = Type,
                                   Gl = Gl,
                                   St = St,
                                   Tr = Tr)) |>
        map(\(df) df |> slice(3:n())),bind_rows) |>
      map(\(df) df |>  arrange(`Date Time`)) |>
      map(\(df) df |> fill(c(`Subject ID`,`Condition ID`,`Reader ID`),.direction = "up")) |>
      map(\(df) df |> fill(`Sensor Serial Number`,.direction = "down")) |>
      map(\(df) df |> relocate(`Subject ID`,`Condition ID`,`Sensor Serial Number`,
                               `Reader ID`,`Date Time`,Type,Gl,St,Tr)) |>
      list_rbind(names_to = "Path") |> 
      arrange(Path,`Subject ID`,`Condition ID`,`Sensor Serial Number`) |> 
      View()
```

<!-- Mobi IH116 -->

```{r}
#| label: Find all events gluc and freestyle files csv
file_list <- dir_ls(gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\CDM_16157\116)"),recurse = T,glob = "*events.csv|*glucPlus.csv|*freestyle.csv")
```

```{r eval = params$interim}
#| label: Interim Filter events, glucplus and freestyle
events_path <- UUU::filter_path(file_path = file_list,filter_text = "UUUFIN|BGM")[[1]] 
glucplus_path <- UUU::filter_path(file_path = file_list,filter_text = "UUUFIN|BGM")[[3]]
free_path <- UUU::filter_path(file_path = file_list,filter_text = "UUUFIN|AUUFIN")[[4]]
```

```{r}
mobi1 <- function(events, gluc, index = NULL) {

  # Individual File
  if (is.numeric(index)) {
    map2(
      # First List
      # Import Events
      events[index] |>
        set_names() |>
        # Consider empty events.csv
        map(possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Time = "c", Type = "c",`Col 9` = "c"),col_select = c(Date,Time,Type,`Col 9`)),tibble()),.progress = TRUE) |>
        map(\(df) df |> filter(Type == "SENSOR_STARTED (58)"),.progress = TRUE) |>
        map(\(df) df |> transmute(
          `Date Time` = case_when(str_starts(Date,"[:digit:]{4}") ~
                                    ymd_hms(format(as.POSIXct(str_c(Date,Time,sep = " "),tz = "UTC"),tz="US/Pacific",format = "%Y-%m-%d:%H:%M:%S"),tz = "US/Pacific"),
                                  .default = ymd_hms(format(as.POSIXct(str_c(mdy(Date),Time,sep = " "),tz = "UTC"),tz="US/Pacific",format = "%Y-%m-%d:%H:%M:%S"),tz = "US/Pacific")),
          Type = Type,
          `Sensor Serial Number` = `Col 9`),.progress = TRUE),
      # Replaced Sensors Only
      # map(\(df) df |> slice_max(`Date Time`,n = 1)),

      map2(
        # Second List
        # Import gluc.csv
        gluc[index] |>
          map(possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Date = "c", Time = "c", Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,Gl),n_max = 2),tibble()),.progress = TRUE),
        gluc[index] |>
          map(possibly(\(path) data.table::fread(path,select = c(1:5),skip = 2,col.names = c("Unique Record ID","Date","Time","Type","Gl"),colClasses = c("V2" = "character","V3" = "character","V4" = "character")),tibble()),.progress = TRUE),
        bind_rows,.progress = TRUE) |>
        map(\(df) df |> transmute(`Subject ID` =
                                    case_when(
                                      # Site ID == ADC
                                      str_to_upper(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T)),
                                      # Site ID == 009
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = 00).{1}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID starts with 1
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID == 081
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "0" ~ str_c(str_extract(df[1,1],regex("(?<=Site ID = 0).{2}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]+",ignore_case = T))),
                                      # Site ID mislabeled
                                      .default = str_c(str_extract(df[1,1],regex("(?<=Site ID = )[:alpha:]+",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]+",ignore_case = T)))
                                    ),
                                  `Condition ID` = str_extract(df[1,1],regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                                  `Date Time` = case_when(str_starts(Date,"[:digit:]{4}") ~
                                                            ymd_hms(str_c(ymd(Date),hms::as_hms(Time),sep = " "),tz = "US/Pacific"),.default = ymd_hms(str_c(mdy(Date),hms::as_hms(Time),sep = " "),tz = "US/Pacific")),
                                  Type = Type,
                                  Gl = Gl),.progress = TRUE) |>
        map(\(df) df |> slice(2:n())),bind_rows,.progress = TRUE) |>
      map(\(df) df |> arrange(`Date Time`),.progress = TRUE) |>
      map(\(df) df |> fill(c(`Subject ID`,`Condition ID`),.direction = "up"),.progress = TRUE) |>
      map(\(df) df |> fill(`Sensor Serial Number`,.direction = "down"),.progress = TRUE) |>
      # map(\(df) df |> filter(!(!is.na(`Sensor Serial Number`) & is.na(`Date Time`))),.progress = TRUE) |>
      map(\(df) df |> relocate(`Subject ID`,`Condition ID`,`Sensor Serial Number`,
                               `Date Time`,Type,Gl),.progress = TRUE) |>
      list_rbind(names_to = "Path")

  } else {

    # All Upload Data
    map2(
      # First List
      # Import Events
      events |>
        set_names() |>
        # Consider empty events.csv
        map(possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Time = "c", Type = "c",`Col 9` = "c"),col_select = c(Date,Time,Type,`Col 9`)),tibble()),.progress = TRUE) |>
        map(\(df) df |> filter(Type == "SENSOR_STARTED (58)"),.progress = TRUE) |>
        map(\(df) df |> transmute(
          `Date Time` = case_when(str_starts(Date,"[:digit:]{4}") ~
                                    ymd_hms(format(as.POSIXct(str_c(Date,Time,sep = " "),tz = "UTC"),tz="US/Pacific",format = "%Y-%m-%d:%H:%M:%S"),tz = "US/Pacific"),
                                  .default = ymd_hms(format(as.POSIXct(str_c(mdy(Date),Time,sep = " "),tz = "UTC"),tz="US/Pacific",format = "%Y-%m-%d:%H:%M:%S"),tz = "US/Pacific")),
          Type = Type,
          `Sensor Serial Number` = `Col 9`),.progress = TRUE),

      map2(
        # Second List
        # Import gluc.csv
        gluc |>
          map(possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Date = "c", Time = "c", Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,Gl),n_max = 2),tibble()),.progress = TRUE),
        gluc |>
          map(possibly(\(path) data.table::fread(path,select = c(1:5),skip = 3,col.names = c("Unique Record ID","Date","Time","Type","Gl"),colClasses = c("V2" = "character","V3" = "character","V4" = "character")),tibble()),.progress = TRUE),
        bind_rows,.progress = TRUE) |>
        map(\(df) df |> transmute(`Subject ID` =
                                    case_when(
                                      # Site ID == ADC
                                      str_to_upper(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T)),
                                      # Site ID == 009
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = 00).{1}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID starts with 1
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID == 081
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "0" ~ str_c(str_extract(df[1,1],regex("(?<=Site ID = 0).{2}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]+",ignore_case = T))),
                                      # Site ID mislabeled
                                      .default = str_c(str_extract(df[1,1],regex("(?<=Site ID = )[:alpha:]+",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]+",ignore_case = T)))
                                    ),
                                  `Condition ID` = str_extract(df[1,1],regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                                  `Date Time` = case_when(str_starts(Date,"[:digit:]{4}") ~
                                                            ymd_hms(str_c(ymd(Date),hms::as_hms(Time),sep = " "),tz = "US/Pacific"),.default = ymd_hms(str_c(mdy(Date),hms::as_hms(Time),sep = " "),tz = "US/Pacific")),
                                  Type = Type,
                                  Gl = Gl),.progress = TRUE) |>
      map(\(df) df |> slice(2:n())),bind_rows,.progress = TRUE) |>
      map(\(df) df |> arrange(`Date Time`),.progress = TRUE) |>
      map(\(df) df |> fill(c(`Subject ID`,`Condition ID`),.direction = "up"),.progress = TRUE) |>
      map(\(df) df |> fill(`Sensor Serial Number`,.direction = "down"),.progress = TRUE) |>
      map(\(df) df |> filter(!(!is.na(`Sensor Serial Number`) & is.na(`Date Time`))),.progress = TRUE) |>
      map(\(df) df |> relocate(`Subject ID`,`Condition ID`,`Sensor Serial Number`,
                               `Date Time`,Type,Gl),.progress = TRUE) |>
      list_rbind(names_to = "Path") |>
      # Remove Duplicated Uploads
      distinct() |>
      arrange(Path,`Subject ID`,`Condition ID`,`Sensor Serial Number`)
  }
}
```

<!-- 34,76 empty -->

```{r}
#| warning: false
mobi1(events = events_path,gluc = glucplus_path,index = 76) |> View()
```

<!-- Mobi ANA -->

```{r}
#| label: Import ketone events, anaplus files csv
#| eval: false
file_list_ketone <- dir_ls(gsub("\\\\", "/", r"(C:\UDP\OutputFiles\Output_2023-11-02-13-54\outputs)"),recurse = T,glob = "*events.csv|*anaPlus.csv")
```

```{r}
#| label: Ketone Filter events, anaPlus
#| eval: false
events_path_ketone <- UUU::filter_path(file_path = file_list_ketone)[[1]]
anaplus_path_ketone <- file_list_ketone[str_detect(file_list_ketone,"anaPlus.csv")]
```

```{r}
#| warning: false
#| eval: false
mobi_ana <- function(events, ana, index = NULL) {

  # Individual File
  if (is.numeric(index)) {
    purrr::map2(
      # First List
      # Import Events
      events[index] |>
        purrr::set_names() |>
        # Consider empty events.csv
        purrr::map(purrr::possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Time = "c", Type = "c",`Col 9` = "c"),col_select = c(Date,Time,Type,`Col 9`)),tibble::tibble()),.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::filter(Type == "SENSOR_STARTED (58)"),.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::transmute(
          `Date Time` = lubridate::ymd_hms(stringr::str_c(Date,Time,sep = " ")),
          Type = Type,
          `Sensor Serial Number` = `Col 9`),.progress = TRUE),

      purrr::map2(
        # Second List
        # Import anaPlus.csv or ana.csv
        ana[index] |>
          purrr::map(purrr::possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Date = "c", Time = "c", Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,ANA,Tr),n_max = 2),tibble::tibble()),.progress = TRUE),
        ana[index] |>
          purrr::map(purrr::possibly(\(path) data.table::fread(path,select = c(1:5,7),skip = 3,col.names = c("Unique Record ID","Date","Time","Type","ANA","Tr"),colClasses = c("V2" = "character","V3" = "character","V4" = "character")),tibble::tibble()),.progress = TRUE),
        dplyr::bind_rows,.progress = TRUE) |> 
        purrr::map(\(df) df |> dplyr::transmute(`Subject ID` =
                                    dplyr::case_when(
                                      # Site ID == ADC
                                      stringr::str_to_upper(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]{4}",ignore_case = T)),
                                      # Site ID == 009
                                      stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                                        stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = 00).{1}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID starts with 1
                                      stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                                        stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{3}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID == 081 or 057
                                      stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{1}",ignore_case = T)) == "0" ~ stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = 0).{2}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]+",ignore_case = T))),
                                      # Site ID mislabeled
                                      .default = stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = )[:alnum:]+",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]+",ignore_case = T)))
                                    ),
                                  `Condition ID` = stringr::str_extract(df[1,1],stringr::regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                                  `Date Time` = lubridate::ymd_hms(stringr::str_c(Date,Time,sep = " ")),
                                  Type = Type,
                                  ANA = ANA,
                                  Tr = Tr),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::slice(2:n())),dplyr::bind_rows,.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::arrange(`Date Time`),.progress = TRUE) |>
      purrr::map(\(df) df |> tidyr::fill(c(`Subject ID`,`Condition ID`),.direction = "up"),.progress = TRUE) |>
      purrr::map(\(df) df |> tidyr::fill(`Sensor Serial Number`,.direction = "down"),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::filter(!(!is.na(`Sensor Serial Number`) & is.na(`Date Time`))),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::relocate(`Subject ID`,`Condition ID`,`Sensor Serial Number`,
                               `Date Time`,Type,ANA,Tr),.progress = TRUE) |>
      purrr::list_rbind(names_to = "Path")

  } else {

    # All Upload Data
    purrr::map2(
      # First List
      # Import Events
      events |>
        purrr::set_names() |>
        # Consider empty events.csv
        purrr::map(purrr::possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Time = "c", Type = "c",`Col 9` = "c"),col_select = c(Date,Time,Type,`Col 9`)),tibble::tibble()),.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::filter(Type == "SENSOR_STARTED (58)"),.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::transmute(
          `Date Time` = lubridate::ymd_hms(stringr::str_c(Date,Time,sep = " ")),
          Type = Type,
          `Sensor Serial Number` = `Col 9`),.progress = TRUE),

      purrr::map2(
        # Second List
        # Import anaPlus.csv or ana.csv
        ana |>
          purrr::map(purrr::possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Date = "c", Time = "c", Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,ANA,Tr),n_max = 2),tibble::tibble()),.progress = TRUE),
        ana |>
          purrr::map(purrr::possibly(\(path) data.table::fread(path,select = c(1:5,7),skip = 3,col.names = c("Unique Record ID","Date","Time","Type","ANA","Tr"),colClasses = c("V2" = "character","V3" = "character","V4" = "character")),tibble::tibble()),.progress = TRUE),
        dplyr::bind_rows,.progress = TRUE) |> 
        purrr::map(\(df) df |> dplyr::transmute(
                                   `Subject ID` =
                                    dplyr::case_when(
                                      # Site ID == ADC
                                      stringr::str_to_upper(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]{4}",ignore_case = T)),
                                      # Site ID == 009
                                      stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                                        stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = 00).{1}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID starts with 1
                                      stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                                        stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{3}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID == 081 or 057
                                      stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{1}",ignore_case = T)) == "0" ~ stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = 0).{2}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]+",ignore_case = T))),
                                      # Site ID mislabeled
                                      .default = stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = )[:alnum:]+",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]+",ignore_case = T)))
                                    ),
                                  `Condition ID` = stringr::str_extract(df[1,1],stringr::regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                                  `Date Time` = lubridate::ymd_hms(stringr::str_c(Date,Time,sep = " ")),
                                  Type = Type,
                                  ANA = ANA,
                                  Tr = Tr),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::slice(2:n())),dplyr::bind_rows,.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::arrange(`Date Time`),.progress = TRUE) |>
      purrr::map(\(df) df |> tidyr::fill(c(`Subject ID`,`Condition ID`),.direction = "up"),.progress = TRUE) |>
      purrr::map(\(df) df |> tidyr::fill(`Sensor Serial Number`,.direction = "down"),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::filter(!(!is.na(`Sensor Serial Number`) & is.na(`Date Time`))),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::relocate(`Subject ID`,`Condition ID`,`Sensor Serial Number`,
                               `Date Time`,Type,ANA,Tr),.progress = TRUE) |>
      purrr::list_rbind(names_to = "Path") |>
      # Remove Duplicated Uploads
      dplyr::distinct() |>
      dplyr::arrange(Path,`Subject ID`,`Condition ID`,`Sensor Serial Number`)
  }
}
```

```{r}
#| warning: false
a <- mobi_ana(events = events_path_ketone[2],ana = anaplus_path_ketone[2])
b <- mobi_ana(events = events_path_ketone,ana = anaplus_path_ketone,index = 2)
```

```{r}
b[duplicated(b),] |> View()
```

```{r}
a |> dplyr::intersect(b |> distinct())
b |> dplyr::setdiff(a)
```

<!-- Oneminutes -->

```{r}
file_list <- dir_ls(gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\CDM_23238\004\UUU)"),recurse = T,glob = "*events.csv|*glucPlus.csv|*oneMinutes.csv")
```

```{r}
events_path <- file_list[str_detect(file_list,"events.csv") & !str_detect(file_list,"Archive")]
glucplus_path <- file_list[str_detect(file_list,"glucPlus.csv") & !str_detect(file_list,"Archive")]
```

```{r}
      purrr::map2(
        # Second List
        # Import gluc.csv
        glucplus_path[1] |>
          purrr::map(purrr::possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,Gl,St,Tr),n_max = 2),tibble::tibble()),.progress = TRUE),
        glucplus_path[1] |>
          purrr::map(purrr::possibly(\(path) data.table::fread(path,select = c(1:7),skip = 3,col.names = c("Unique Record ID","Date","Time","Type","Gl","St","Tr"),colClasses = c("V2" = "Date","V4" = "character"),fill = T),tibble::tibble()),.progress = TRUE),
        dplyr::bind_rows,.progress = TRUE) |> 
           list_rbind() |>  
           View()
```

```{r}
apol <- function(events, gluc, index = NULL) {

  # Individual File
  if (is.numeric(index)) {
    purrr::map2(
      # First List
      # Import Events
      events[index] |>
        purrr::set_names() |>
        # Consider empty events.csv
        purrr::map(purrr::possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(`Col 9` = "c"),col_select = c(Date,Time,Type,`Col 9`)),tibble::tibble()),.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::filter(Type == "SENSOR_STARTED (58)"),.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::transmute(
          `Date Time` = lubridate::ymd_hms(stringr::str_c(Date,Time,sep = " ")),
           Type = Type,
          `Sensor Serial Number` = `Col 9`),.progress = TRUE),
        # Replaced Sensors Only
        # map(\(df) df |> slice_max(`Date Time`,n = 1)),

      purrr::map2(
        # Second List
        # Import gluc.csv
        gluc[index] |>
          purrr::map(purrr::possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,Gl,St,Tr),n_max = 2),tibble::tibble()),.progress = TRUE),
        gluc[index] |>
          purrr::map(purrr::possibly(\(path) data.table::fread(path,select = c(1:7),skip = 3,col.names = c("Unique Record ID","Date","Time","Type","Gl","St","Tr"),colClasses = c("V2" = "Date","V4" = "character"),fill = T),tibble::tibble()),.progress = TRUE),
        dplyr::bind_rows,.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::transmute(`Subject ID` =
                                    dplyr::case_when(
                                      # Site ID == ADC
                                      stringr::str_to_upper(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]{4}",ignore_case = T)),
                                      # Site ID == 009
                                      stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                                        stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = 00).{1}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID starts with 1
                                      stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                                        stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{3}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID == 081 or 057
                                      stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{1}",ignore_case = T)) == "0" ~ stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = 0).{2}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]+",ignore_case = T))),
                                      # Site ID mislabeled
                                      .default = stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = )[:alnum:]+",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]+",ignore_case = T)))
                                    ),
                                  `Condition ID` = stringr::str_extract(df[1,1],stringr::regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                                  `Reader ID` = stringr::str_extract(df[2,1],stringr::regex("(?<=\\s).{13}",ignore_case = T)),
                                  `Date Time` = lubridate::ymd_hms(stringr::str_c(Date,Time,sep = " ")),
                                   Type = Type,
                                   Gl = Gl,
                                   St = St,
                                   Tr = Tr),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::slice(3:n()),.progress = TRUE),dplyr::bind_rows,.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::arrange(`Date Time`),.progress = TRUE) |>
      purrr::map(\(df) df |> tidyr::fill(c(`Subject ID`,`Condition ID`,`Reader ID`),.direction = "up"),.progress = TRUE) |>
      purrr::map(\(df) df |> tidyr::fill(`Sensor Serial Number`,.direction = "down"),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::relocate(`Subject ID`,`Condition ID`,`Sensor Serial Number`,
                               `Reader ID`,`Date Time`,Type,Gl,St,Tr),.progress = TRUE) |>
      purrr::list_rbind(names_to = "Path")

  } else {

    # All Upload Data
    purrr::map2(
      # First List
      # Import Events
      events |>
        purrr::set_names() |>
        # Consider empty events.csv
        purrr::map(purrr::possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(`Col 9` = "c"),col_select = c(Date,Time,Type,`Col 9`)),tibble::tibble()),.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::filter(Type == "SENSOR_STARTED (58)"),.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::transmute(
          `Date Time` = lubridate::ymd_hms(stringr::str_c(Date,Time,sep = " ")),
           Type = Type,
          `Sensor Serial Number` = `Col 9`),.progress = TRUE),
        # Replaced Sensors Only
        # map(\(df) df |> slice_max(`Date Time`,n = 1)),

      purrr::map2(
        # Second List
        # Import gluc.csv
        gluc |>
          purrr::map(purrr::possibly(\(path) vroom::vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,Gl,St,Tr),n_max = 2),tibble::tibble()),.progress = TRUE),
        gluc |>
          purrr::map(purrr::possibly(\(path) data.table::fread(path,select = c(1:7),skip = 3,col.names = c("Unique Record ID","Date","Time","Type","Gl","St","Tr"),colClasses = c("V2" = "Date","V4" = "character"),fill = T),tibble::tibble()),.progress = TRUE),
        bind_rows,.progress = TRUE) |>
        purrr::map(\(df) df |> dplyr::transmute(`Subject ID` =
                                  dplyr::case_when(
                                      # Site ID == ADC
                                    stringr::str_to_upper(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]{4}",ignore_case = T)),
                                      # Site ID == 009
                                    stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                                      stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = 00).{1}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID starts with 1
                                    stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                                      stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{3}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID == 081 or 057
                                    stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = ).{1}",ignore_case = T)) == "0" ~ stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = 0).{2}",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]+",ignore_case = T))),
                                      # Site ID mislabeled
                                      .default = stringr::str_c(stringr::str_extract(df[1,1],stringr::regex("(?<=Site ID = )[:alnum:]+",ignore_case = T)),stringr::str_extract(df[1,1],stringr::regex("(?<=Subject ID = )[:digit:]+",ignore_case = T)))
                                    ),
                                  `Condition ID` = stringr::str_extract(df[1,1],stringr::regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                                  `Reader ID` = stringr::str_extract(df[2,1],stringr::regex("(?<=\\s).{13}",ignore_case = T)),
                                  `Date Time` = lubridate::ymd_hms(stringr::str_c(Date,Time,sep = " ")),
                                   Type = Type,
                                   Gl = Gl,
                                   St = St,
                                   Tr = Tr),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::slice(3:n()),.progress = TRUE),dplyr::bind_rows,.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::arrange(`Date Time`),.progress = TRUE) |>
      purrr::map(\(df) df |> tidyr::fill(c(`Subject ID`,`Condition ID`,`Reader ID`),.direction = "up"),.progress = TRUE) |>
      purrr::map(\(df) df |> tidyr::fill(`Sensor Serial Number`,.direction = "down"),.progress = TRUE) |>
      purrr::map(\(df) df |> dplyr::relocate(`Subject ID`,`Condition ID`,`Sensor Serial Number`,
                               `Reader ID`,`Date Time`,Type,Gl,St,Tr),.progress = TRUE) |>
      purrr::list_rbind(names_to = "Path") |>
      # Remove Duplicated Uploads
      dplyr::distinct() |>
      dplyr::arrange(Path,`Subject ID`,`Condition ID`,`Sensor Serial Number`)
  }
}
```

```{r}
#| warning: false
apol(events = events_path,gluc = glucplus_path) |> View()
```

<!-- Sibionics -->
\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-23241\SE01\UploadData\SiBionics
\\wf00168p.oneabbott.com\data1\CDM\ADC-US-PMS-22222\UploadData\SiBionics\083-IDR
```{r}
sib_list <- dir_ls(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-23241\SE01\UploadData\SiBionics)"),recurse = T,glob = "*xlsx|*csv")
sib_path <- sib_list[!str_detect(sib_list,regex("Transfers",ignore_case = T))]
```

\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-23241\SE01\UploadData\SiBionics\0830001
//wf00168p.oneabbott.com/data1/CDM/ADC-US-PMS-22222/UploadData/SiBionics/083-IDR/0830002/FV/0830002_SiSensingCGM-LT22050X74-01.11.00.00.xlsx
```{r}
sibonics1 <- function(sibonics_path, index = NULL){

if (is.numeric(index)) {
   if(str_detect(sibonics_path[index],".xlsx")){
# .xlsx
sibonics_path[index][str_detect(sibonics_path[index],".xlsx")] |>
       set_names() |>
       map(\(path) readxl::read_excel(path,col_names = T,col_types = c("guess","guess"))) |>
       list_rbind(names_to = "Path") |>
       transmute(Path = Path,
                 `Subject ID` = str_extract(Path,"(?<=0)[:digit:]{6}"),
                 `Date Time` = ymd_hm(血糖时间),
                  Gl = as.numeric(na_if(血糖值,"异常")))
   } else {
# .csv
sibonics_path[index][str_detect(sibonics_path[index],".csv")] |> 
  set_names() |>
         map(possibly(\(path) vroom::vroom(path,delim = ",",show_col_types = F,col_select = c(ast,t,name,v,vSecond),col_types = c(ast = "d", t = "d", v = "d", vSecond = "d")),tibble::tibble()),.progress = TRUE) |>
        list_rbind(names_to = "Path") |> 
        mutate(`Subject ID` = str_extract(Path,"(?<=0)[:digit:]{6}"),
               `Date Time` = floor_date(as_datetime(t/1000,tz = "UTC"),"min"),
                Gl = v) |> 
        # One-hour Warn up
        filter(`Date Time` >= first(`Date Time`) + dminutes(59),.by = `Subject ID`) |> 
        # Valid Glucose Reading
        filter(vSecond != 0) |> 
        # Assign abnormal
        transmute(Path = Path,
                 `Subject ID` = `Subject ID`,
                 `Date Time` = `Date Time`,
                  Gl = case_when(ast == 2 ~ NA,
                                .default = Gl))
   }
} else {
    # .xlsx
sibonics_path[str_detect(sibonics_path,".xlsx")] |>
       set_names() |>
       map(\(path) readxl::read_excel(path,col_names = T,col_types = c("guess","guess"))) |>
       list_rbind(names_to = "Path") |>
       transmute(Path = Path,
                 `Subject ID` = str_extract(Path,"(?<=0)[:digit:]{6}"),
                 `Date Time` = ymd_hm(血糖时间),
                  Gl = as.numeric(na_if(血糖值,"异常"))) |> 
      bind_rows(
        # .csv
sibonics_path[str_detect(sibonics_path,".csv")] |> 
  set_names() |>
        map(possibly(\(path) vroom::vroom(path,delim = ",",show_col_types = F,col_select = c(ast,t,name,v,vSecond),col_types = c(ast = "d", t = "d", v = "d", vSecond = "d")),tibble::tibble()),.progress = TRUE) |>
        list_rbind(names_to = "Path") |> 
        mutate(`Subject ID` = str_extract(Path,"(?<=0)[:digit:]{6}"),
               `Date Time` = floor_date(as_datetime(t/1000,tz = "UTC"),"min"),
                Gl = v) |> 
        # One-hour Warn up
        filter(`Date Time` >= first(`Date Time`) + dminutes(59),.by = `Subject ID`) |> 
        # Valid Glucose Reading
        filter(vSecond != 0) |> 
        # Assign abnormal
        transmute(Path = Path,
                 `Subject ID` = `Subject ID`,
                 `Date Time` = `Date Time`,
                  Gl = case_when(ast == 2 ~ NA,
                                .default = Gl))) |> 
        arrange(`Subject ID`)
  }
}
```

```{r}
sibonics1(sibonics_path = sib_path) |> View()
```
<!-- Difference Measures -->

```{r}
#| label: Import Ap.rds
Ap <- readRDS(gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\Clinical Study Files\Apollo\ADC-US-VAL-21206 iCGM Libre 2\Statistics\Programs\Canada\Datasets\Ap.rds)"))
```

```{r}
#| label: Import BG.rds
BG <- readRDS(gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\Clinical Study Files\Apollo\ADC-US-PMS-22222_SiBionics\Statistics\Programs\Datasets\AL\BG.rds)"))
Sib <- readRDS(gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\Clinical Study Files\Apollo\ADC-US-PMS-22222_SiBionics\Statistics\Programs\Datasets\AL\Sib.rds)"))
```

```{r}
#| label: Pair Function
PAIRBG_fun <- function(data){
  # BG Strips Data
  BG %>%
     # Remove Extreme Reference readings <20 or >500
     filter(between(Reference,20,500)) %>% 
     inner_join(
               # Sensor Data
               data %>%
                select(!Path) %>% 
                mutate(
                  `Lower Bound` = case_when(Type %in% c("904","906") ~ `Date Time` - dminutes(5),
                                            .default = `Date Time` - dminutes(8)),
                  `Upper Bound` = case_when(Type %in% c("904","906") ~ `Date Time` + dminutes(5),
                                            .default = `Date Time` + dminutes(8))
                     ),
                   by = join_by("Subject ID",between(`BG Date Time`,`Lower Bound`,`Upper Bound`)),
                   multiple = "all"
                     ) %>%
      # Select the nearest time
      group_by(`Subject ID`,`BG Date Time`) %>%
      arrange(desc(`Date Time`)) %>%
      slice_min(abs(`BG Date Time` - `Date Time`),n = 1,with_ties = F) %>%
      ungroup() %>%
      # Select the nearest time
      group_by(`Subject ID`,`Date Time`) %>%
      arrange(desc(`Date Time`)) %>%
      slice_min(abs(`BG Date Time` - `Date Time`),n = 1,with_ties = F) %>%
      ungroup() %>%
      select(!c(contains("Bound")))
}
```

```{r}
#| label: Paired Data
Ap_mmol <- Sib |> 
           mutate(eTime = as.numeric(difftime(`Date Time`,first(`Date Time`),units = "days") + 1/24),
                 Day = floor(eTime) + 1,
                 Gl_mmol = Gl,
                 Type = "904",
                 Sensor = "SiBionics",.by = c(`Subject ID`)) |> 
          filter(between(Gl,2.2,25.0)) |> 
      # Real Time Glucose
      filter(Type == "904") |>
      group_split(`Subject ID`,Sensor) |>  
      # New anonymous function
      map(\(df) PAIRBG_fun(data = df),.progress = T) |>
      # formula syntax
      # map(~ PAIRBG_fun(data = .x)) %>%
      list_rbind() |> 
      # Row-wise Calculation
      mutate(Reference_mmol = Reference/18.016,
            # Reference glucose values < 100 mg/dL
            `Difference(mmol/L)` = Gl_mmol - Reference_mmol,
            `Absolute Difference(mmol/L)` = abs(`Difference(mmol/L)`),
            # Reference glucose values >= 100 mg/dL
            `Relative Difference(%)` = (`Difference(mmol/L)`/Reference_mmol)*100,
            `Absolute Relative Difference(%)` = abs(`Relative Difference(%)`),
            `Glucose Level(mg/dL) [mmol/L]` = UUU::fct_case_when(round(Reference + 0.001) < 54 ~ "<54 [3.0]",
                           between(round(Reference + 0.001),54,69) ~ "54 to 69 [3.0-3.8]",
                           between(round(Reference + 0.001),70,180) ~ "70 to 180 [3.9-10.0]",
                           between(round(Reference + 0.001),181,250) ~ "181 to 250 [10.0-13.9]",
                                      TRUE ~ ">250 [13.9]"))
```


```{r}
#| label: difference measure function
diff_measure_fun <- function(data, ref, cgm, group_var, unit = "mg/dL", reference_breakpoint = TRUE) {
  
  round_normal <- function(x, digits){
    ifelse(x >= 0,round(x + 10^-(digits + 3),digits),round(x - 10^-(digits + 3),digits))
}
  
diff_calculation <- list(Mean = ~ mean(.x, na.rm = T),
                         SD = ~ sd(.x, na.rm = T),
                         Median = ~ median(.x, na.rm = T),
                         Min = ~ min(.x, na.rm = T),
                         Max = ~ max(.x, na.rm = T),
                         N = ~ sum(!is.na(.x),na.rm = T))
df <- data |> 
      mutate(Difference = {{cgm}} - {{ref}},
            `Absolute Difference` = abs(Difference),
            `Relative Difference(%)` = (Difference/{{ref}})*100,
            `Absolute Relative Difference(%)` = abs(`Relative Difference(%)`))



if (reference_breakpoint == TRUE) {
# gt_group_var <- c("Level",group_var)
df |>
   mutate(# Reference Level
          Level = if (unit == "mg/dL") {
                  case_when(round({{ref}} + 0.001) < 100 ~ "<100 mg/dL[5.6 mmol/L]",
                            .default = ">=100 mg/dL[5.6 mmol/L]")}
                  else if (unit == "mmol/L"){
                  case_when(round({{ref}} + 0.001,1) < 5.6 ~ "<100 mg/dL[5.6 mmol/L]",
                            .default = ">=100 mg/dL[5.6 mmol/L]")
                  })|>
   # Overall Reference Level
   bind_rows(
             df |>
             mutate(Level = "Overall Levels (100 mg/dL[5.6 mmol/L] breakpoint)")
   ) |>
   pivot_longer(Difference:`Absolute Relative Difference(%)`,names_to = "Measure") |>
   # Factor order Measure
   filter((Measure %in% c("Difference", "Absolute Difference") &
          Level %in% c("<100 mg/dL[5.6 mmol/L]", "Overall Levels (100 mg/dL[5.6 mmol/L] breakpoint)")) |
          (Measure %in% c("Relative Difference(%)", "Absolute Relative Difference(%)") &
          Level %in% c(">=100 mg/dL[5.6 mmol/L]", "Overall Levels (100 mg/dL[5.6 mmol/L] breakpoint)"))) |>
   group_by(pick(Level,Measure)) |>
   # User-Defined group variables
   group_by(pick({{group_var}}),.add = TRUE) |>
   summarise_at(.vars = "value", diff_calculation) |> 
   ungroup() |> 
   # Round Number
   mutate(across(c(Mean:Max), ~ round_normal(.x,1))) |>  
   # Unit
   mutate(Measure = case_when(
                  unit == "mg/dL" & Measure %in% c("Difference","Absolute Difference")
                        ~ str_c(Measure," (",unit,")"),
                  unit == "mmol/L" & Measure %in% c("Difference","Absolute Difference")
                        ~ str_c(Measure," (",unit,")"),
                  .default = Measure
                        ),
          Level = factor(Level, levels = c("<100 mg/dL[5.6 mmol/L]",">=100 mg/dL[5.6 mmol/L]", "Overall Levels (100 mg/dL[5.6 mmol/L] breakpoint)")),
          Measure = factor(Measure, levels = c("Difference (mg/dL)","Absolute Difference (mg/dL)","Difference (mmol/L)","Absolute Difference (mmol/L)","Relative Difference(%)","Absolute Relative Difference(%)"))) |> 
   arrange(pick(Level,Measure)) |> 
   arrange(pick({{group_var}})) |> 
   gt(groupname_col = c(group_var,"Level")) |>
   cols_align(align = "center") |>
   fmt_number(columns = Mean:Max,decimals = 1) |>
   sub_missing(columns = everything(),missing_text = "") |>
   opt_stylize(style = 6, color = "blue")
  } else {
    gt_group_var <- group_var[1:length(group_var) - 1]
     df |>
     group_by(pick({{group_var}})) |>
     summarise(
      across(c(Difference:`Absolute Relative Difference(%)`),
              diff_calculation[1:3],.names = "{.col} {.fn}"), N = n(),.groups = "drop") |>
     relocate(N,.after = last_col()) |>   
     # Round Number
     mutate(across(contains(c("Mean","Median")), ~ round_normal(.x,1)),
            across(contains(c("SD")), ~ round_normal(.x,2))) |> 
     gt(groupname_col = c(gt_group_var))  |>
     cols_align(align = "center") |>
     tab_spanner(label = str_c("Difference"," (",unit,")"),columns = c("Difference Mean","Difference Median","Difference SD")) |>
     tab_spanner(label = str_c("Abs. Difference"," (",unit,")"),columns = c("Absolute Difference Mean","Absolute Difference Median","Absolute Difference SD")) |>
     tab_spanner(label = "Relative Difference(%)",columns = c("Relative Difference(%) Mean","Relative Difference(%) Median","Relative Difference(%) SD")) |>
     tab_spanner(label = "Absolute Relative Difference(%)",columns = c("Absolute Relative Difference(%) Mean","Absolute Relative Difference(%) Median","Absolute Relative Difference(%) SD")) |>
     fmt_number(columns = contains(c("Mean","Median")),decimals = 1) |>
     fmt_number(columns = contains(c("SD")),decimals = 2) |>
     cols_label(
      `Difference Mean` = "Mean",`Difference Median` = "Median",
      `Difference SD` = "SD",
      `Relative Difference(%) Mean` = "Mean",`Relative Difference(%) Median` = "Median",`Relative Difference(%) SD` = "SD",
      `Absolute Difference Mean` = "Mean",`Absolute Difference Median` = "Median",
      `Absolute Difference SD` =  "SD",`Absolute Relative Difference(%) Mean` = "Mean",
      `Absolute Relative Difference(%) Median` = "Median",
      `Absolute Relative Difference(%) SD` = "SD") |>
       sub_missing(columns = everything(),missing_text = "") |>
       opt_stylize(style = 6, color = "blue")
   }
}
```

```{r}
Ap_mmol |>
   select(!contains("Difference")) |> 
   # filter(Day <= 15) |> 
   # filter(between(Gl,40,400)) |> 
   diff_measure_fun(ref = Reference_mmol, cgm = Gl, group_var = c("Sensor","Glucose Level(mg/dL) [mmol/L]"), unit = "mmol/L",reference_breakpoint = F)
```

```{r}
Ap |> 
   select(!c(`Difference(mg/dL)`:`Absolute Relative Difference(%)`)) |> 
   filter(Day <= 15) |> 
   filter(between(Gl,40,400)) |> 
   diff_measure_fun(ref = Reference, cgm = Gl,group_var = c("Age Group","Reference Type"), unit = "mg/dL",reference_breakpoint = T)
```

```{r}
Ap |> 
   select(!c(`Difference(mg/dL)`:`Absolute Relative Difference(%)`)) |> 
   filter(Day <= 15) |> 
   filter(between(Gl,40,400)) |> 
   diff_measure_fun(ref = Reference, cgm = Gl,group_var = c("Age Group","Reference Type","CGM Glucose Level"), unit = "mg/dL",reference_breakpoint = F) 
```

```{r}
#| label: CGM Difference Measures vs. YSIref
#| tbl-cap: "CGM Difference Measures vs. YSIref"
Ap |> 
   filter(Day <= 15) |> 
   diff_measure_fun(group_var = c(`Age Group`,`Reference Type`,Level),reference = T)
```

```{r}
#| label: CGM Difference Measures by Reference Glucose Level, YSIref
#| tbl-cap: "CGM Difference Measures by Reference Glucose Level, YSIref"
Ap |> 
   filter(Day <= 15) |> 
   diff_measure_fun(group_var = c(`Age Group`,`Reference Type`,`Ref. Glucose Level`),reference = F)
```

```{r}
#| label: CGM Difference Measures by CGM Level, YSIref
#| tbl-cap: "CGM Difference Measures by CGM Level, YSIref"
Ap |> 
   filter(Day <= 15) |> 
   diff_measure_fun(group_var = c(`Age Group`,`Reference Type`,`CGM Glucose Level`),reference = F)
```

