---
title: "Untitled"
format: html
editor: visual
execute: 
  eval: false
---

```{r}
#| message: false
library(vroom)
library(fs)
library(tidyverse)
```

<!-- Atna -->

<!-- 193, 210 and 215 -->

```{r}
#| label: Find all events gluc and freestyle files csv
file_list <- dir_ls(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-21210\UploadData\AUU\AUU_DataFiles)"),recurse = T,glob = "*events.csv|*gluc.csv|*freestyle.csv")
```

```{r}
events_path <- file_list[str_detect(file_list,"events") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
gluc_path <- file_list[str_detect(file_list,"gluc") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
library(UUU)
```

```{r}
#| warning: false
atna(events = events_path,gluc = gluc_path) |> View()
```

<!-- Apol -->

```{r}
#| label: Find all events gluc and freestyle files csv
file_list <- dir_ls(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-VAL-21206\UploadData\AUU\AUU_DataFiles)"),recurse = T,glob = "*events.csv|*gluc.csv|*freestyle.csv")
```

```{r}
events_path <- file_list[str_detect(file_list,"events") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
#| warning: false
events(events_path = events_path)
```

```{r}
gluc_path <- file_list[str_detect(file_list,"gluc") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
free_path <- file_list[str_detect(file_list,"freestyle") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
#| warning: false
freestyle(freestyle_path = free_path)
```

```{r}
#| warning: false
apol(events = events_path,gluc = gluc_path)
```

<!-- Mobi IH102 -->

```{r}
#| label: Find all events gluc and freestyle files csv
file_list <- dir_ls(gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\CDM_16157\102\UUU\102UUUFIN_G1L1_3\29SEP2022_G1L3)"),recurse = T,glob = "*events.csv|*gluc.csv|*freestyle.csv")
```

```{r}
events_path <- file_list[str_detect(file_list,"events") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
gluc_path <- file_list[str_detect(file_list,"gluc") & !str_detect(file_list,regex("Transfers",ignore_case = T))]
```

```{r}
#| warning: false
mobi(events = events_path,gluc = gluc_path) |> View()
```

<!-- events -->

<!-- IH115 -->

```{r}
#| label: Find all events gluc and freestyle files csv
file_list1 <- dir_ls(gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\CDM_16157\115\UUU)"),recurse = T,glob = "*events.csv|*gluc.csv|*freestyle.csv")
```

```{r}
#| label: Filter events index 300
events_path <- file_list1[str_detect(file_list1,"events") & !str_detect(file_list1,"Archive")]
```

<!-- IH115 -->

<!-- 206 -->

```{r}
#| label: OUS Import all events, gluc and glucPlus files csv
file_list <- dir_ls(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-VAL-21206\Processing\R-FSL2-LVC-G3-OUS\glucplusOutput)"),recurse = T,glob = "*events.csv|*glucPlus.csv|*gluc.csv")
```

<!-- 584 files -->

```{r}
#| label: Filter events index 237
events_path <- file_list[str_detect(file_list,"events")]
```

<!-- 206 -->

```{r}
#| warning: false
  events_path |>
      map(possibly(\(path) vroom(path,delim = ",",
                                 col_names = T,
                                 show_col_types = F,
                                 col_types = c(`Col 5` = "c",`Col 9` = "c"),
                                 col_select = 
                                   c(`Unique Record ID`,Date,Time,Type,`Col 5`,`Col 9`)),
          tibble()),.progress = TRUE) |>
      map(\(df) df |>
            transmute(`Subject ID` =
                        case_when(
                          # Site ID == ADC
                          str_to_upper(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T)),
                          # Site ID == 009
                          str_extract(df[1,1],regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                            str_c(str_extract(df[1,1],regex("(?<=Site ID = 00).{1}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                          # Site ID starts with 1
                          str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                            str_c(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                          # Site ID == 081
                          .default = str_c(str_extract(df[1,1],regex("(?<=Site ID = 0).{2}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T)))
                        ),
                      `Condition ID` = str_extract(df[1,1],regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                      `Reader ID` = str_extract(df[2,1],regex("(?<=\\s).{13}",ignore_case = T)),
                      `Sensor Serial Number` = `Col 5`,
                      `Col 9` = `Col 9`,
                      `Date Time` = ymd_hms(str_c(Date,Time,sep = " ")),
                       Type = Type)) |>
        list_rbind() |>
      # Remove Duplicated
        distinct() |>
      # Remove Type is NA
        filter(!is.na(Type)) |> 
        mutate(`Col 9` = case_when(str_detect(`Col 9`,"[:alpha:]") ~ `Col 9`,
                                   .default = NA_character_),
               `Sensor Serial Number` = case_when(
                 str_detect(`Sensor Serial Number`,"[:alpha:]") ~ `Sensor Serial Number`,
                   .default = `Col 9`)) |> 
        fill(`Sensor Serial Number`,.direction = "up") |> 
        select(!`Col 9`) |> 
        arrange(`Subject ID`,`Condition ID`) |> View()
```

<!-- 225 SE14 Site ID = CIG -->

```{r}
#| label: Find all events and gluc files csv
file_list <- dir_ls(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-22225\SE14_Glu\UploadData\UUU\UUU_DataFiles\TDE-082)"),recurse = T,glob = "*events.csv|*gluc.csv|*freestyle.csv")
```

```{r}
#| label: Filter all and find events 
events_path <- file_list[!str_detect(file_list,"Transfers|FV_Do Not Use") & str_detect(file_list,"events")]
```

```{r}
#| label: Filter all and find gluc
gluc_path <- file_list[!str_detect(file_list,"Transfers|FV_Do Not Use") & str_detect(file_list,"gluc")]
```

```{r}
#| warning: false
UUU::apol(events = events_path,gluc = gluc_path,index = 20) |> View()
```

```{r}
#| warning: false
    map2(
      # First List
      # Import Events
      events_path[92:94] |>
        # Consider empty events.csv
        map(possibly(\(path) vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(`Col 9` = "c"),col_select = c(Date,Time,Type,`Col 9`)),tibble()),.progress = TRUE) |>
        map(\(df) df |> filter(Type == "SENSOR_STARTED (58)")) |>
        map(\(df) df |> transmute(
          `Date Time` = ymd_hms(str_c(Date,Time,sep = " ")),
           Type = Type,
          `Sensor Serial Number` = `Col 9`)),
        # Replaced Sensors Only
        # map(\(df) df |> slice_max(`Date Time`,n = 1)),

      map2(
        # Second List
        # Import gluc.csv
        gluc_path[92:94] |>
          set_names() |> 
          map(possibly(\(path) vroom(path,delim = ",",col_names = T,show_col_types = F,col_types = c(Type = "c"),col_select = c(`Unique Record ID`,Date,Time,Type,Gl,St,Tr),n_max = 2),tibble())),
        gluc_path[92:94] |>
          set_names() |> 
          map(possibly(\(path) data.table::fread(path,select = c(1:7),skip = 3,col.names = c("Unique Record ID","Date","Time","Type","Gl","St","Tr"),colClasses = c("V2" = "Date","V4" = "character")),tibble())),
        bind_rows,.progress = TRUE) |>
        map(\(df) df |> transmute(`Subject ID` =
                                    case_when(
                                      # Site ID == ADC
                                      str_to_upper(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T))) == "ADC" ~ str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]{4}",ignore_case = T)),
                                      # Site ID == 009
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{2}",ignore_case = T)) == "00" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = 00).{1}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID starts with 1
                                      str_extract(df[1,1],regex("(?<=Site ID = ).{1}",ignore_case = T)) == "1" ~
                                        str_c(str_extract(df[1,1],regex("(?<=Site ID = ).{3}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                      # Site ID == 081
                                     str_extract(df[1,1],regex("(?<=Site ID = ).{2}",ignore_case = T)) == "08" ~ str_c(str_extract(df[1,1],regex("(?<=Site ID = 0).{2}",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = ).{4}",ignore_case = T))),
                                     # Site ID mislabeled  
                                     .default = str_c(str_extract(df[1,1],regex("(?<=Site ID = )[:alpha:]+",ignore_case = T)),str_extract(df[1,1],regex("(?<=Subject ID = )[:digit:]+",ignore_case = T)))
                                    ),
                                  `Condition ID` = str_extract(df[1,1],regex("(?<=Condition ID = ).{3}",ignore_case = T)),
                                  `Reader ID` = str_extract(df[2,1],regex("(?<=\\s).{13}",ignore_case = T)),
                                  `Date Time` = ymd_hms(str_c(Date,Time,sep = " ")),
                                   Type = Type,
                                   Gl = Gl,
                                   St = St,
                                   Tr = Tr)) |>
        map(\(df) df |> slice(3:n())),bind_rows) |>
      map(\(df) df |>  arrange(`Date Time`)) |>
      map(\(df) df |> fill(c(`Subject ID`,`Condition ID`,`Reader ID`),.direction = "up")) |>
      map(\(df) df |> fill(`Sensor Serial Number`,.direction = "down")) |>
      map(\(df) df |> relocate(`Subject ID`,`Condition ID`,`Sensor Serial Number`,
                               `Reader ID`,`Date Time`,Type,Gl,St,Tr)) |>
      list_rbind(names_to = "Path") |> 
      arrange(Path,`Subject ID`,`Condition ID`,`Sensor Serial Number`) |> 
      View()
```
